
default_platform(:android)

platform :android do
  
  lane :build_apk do
    # Navigate to the Flutter project directory
    Dir.chdir("..") do
      # Build the APK using the flutter command
      sh("flutter build apk --release")
    end
    # Optionally, move the APK to a specific location
    # sh("mv build/app/outputs/flutter-apk/app-release.apk")
  end

  lane :stage do |options|
    commit = last_git_commit
    if options[:branch] != "main" and commit[:message].downcase.include? "#upload" or options[:branch] == "master"
      release_type = "Release"
  
      commit_notes = ""
      if(options[:branch] == "master")
        commit_notes = "Release candidate. #{commit[:message]}"
      else
        commit_notes = commit[:message].sub("#upload ", "")
      end
  
      # Upload build to Firebase
      sign_apk_lane(flavor: options[:flavor].capitalize, type: release_type)
      publish_to_firebase(flavor: options[:flavor], branch: options[:branch], notes: commit_notes, author: commit[:author], app_id: options[:app_id], firebase_token: options[:firebase_token])
  
    end
  end

  lane :publish_to_firebase do |options|
    build_apk
    build_notes = "Environment: #{options[:flavor].capitalize}. Branch: #{options[:branch]}. Notes: #{options[:notes]}. Built by #{options[:author]}"

    firebase_app_distribution(
       app: "#{options[:app_id]}",
       groups: "name-of-your-test-group",
       release_notes: build_notes,
       apk_path: "app/build/outputs/apk/#{options[:flavor].downcase}/release/app-#{options[:flavor].downcase}-release.apk",
       firebase_cli_token: "#{options[:firebase_token]}"
    )
end


end


